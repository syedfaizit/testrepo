import random
import time

# Class for the player
class Player:
    def __init__(self, name, health, attack, defense):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense
        self.inventory = []

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage):
        damage_taken = max(damage - self.defense, 0)
        self.health -= damage_taken
        return damage_taken

    def heal(self, amount):
        self.health += amount
        print(f"{self.name} heals for {amount} health.")

    def attack_enemy(self, enemy):
        damage = random.randint(self.attack - 2, self.attack + 2)
        print(f"{self.name} attacks {enemy.name} for {damage} damage!")
        return damage

    def add_to_inventory(self, item):
        self.inventory.append(item)
        print(f"{self.name} found a {item} and added it to the inventory.")

    def show_stats(self):
        print(f"\n{self.name}'s Stats:")
        print(f"Health: {self.health}")
        print(f"Attack: {self.attack}")
        print(f"Defense: {self.defense}")
        print(f"Inventory: {', '.join(self.inventory) if self.inventory else 'Nothing'}\n")

# Class for the enemy
class Enemy:
    def __init__(self, name, health, attack, defense, treasure):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense
        self.treasure = treasure

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage):
        damage_taken = max(damage - self.defense, 0)
        self.health -= damage_taken
        return damage_taken

    def attack_player(self, player):
        damage = random.randint(self.attack - 2, self.attack + 2)
        print(f"{self.name} attacks {player.name} for {damage} damage!")
        return damage

# Class for the dungeon
class Dungeon:
    def __init__(self):
        self.rooms = ["A dark room", "A treasure-filled chamber", "A spooky hallway", "A monster's lair"]
        self.enemies = [
            Enemy("Goblin", 30, 6, 1, "Goblin's Dagger"),
            Enemy("Skeleton", 40, 8, 2, "Skeleton's Shield"),
            Enemy("Dragon", 100, 20, 5, "Dragon's Claw")
        ]

    def generate_enemy(self):
        return random.choice(self.enemies)

    def next_room(self):
        return random.choice(self.rooms)

# Game function
def start_game():
    print("Welcome to the Dungeon Adventure!\n")
    name = input("Enter your character's name: ")
    player = Player(name, 100, 10, 3)
    dungeon = Dungeon()

    print("\nYou find yourself at the entrance of a dark dungeon. It's time for an adventure!")
    time.sleep(2)

    while player.is_alive():
        current_room = dungeon.next_room()
        print(f"\nYou enter {current_room}.\n")

        if current_room == "A monster's lair":
            enemy = dungeon.generate_enemy()
            print(f"A wild {enemy.name} appears!\n")

            while enemy.is_alive() and player.is_alive():
                player.show_stats()

                action = input("What will you do? (1) Attack (2) Heal (3) Run: ")
                if action == "1":
                    damage = player.attack_enemy(enemy)
                    enemy.take_damage(damage)
                    print(f"{enemy.name} has {enemy.health} health left.\n")
                elif action == "2":
                    heal_amount = random.randint(5, 20)
                    player.heal(heal_amount)
                elif action == "3":
                    print(f"{player.name} runs away from the {enemy.name}.")
                    break
                else:
                    print("Invalid action. Try again.")

                if enemy.is_alive():
                    damage = enemy.attack_player(player)
                    player.take_damage(damage)
                    print(f"{player.name} has {player.health} health left.\n")

            if player.is_alive() and not enemy.is_alive():
                print(f"\nYou defeated the {enemy.name}!\n")
                player.add_to_inventory(enemy.treasure)

        else:
            print(f"You explore the {current_room} and find nothing of interest.\n")

        continue_adventure = input("Do you want to continue exploring? (y/n): ")
        if continue_adventure.lower() != "y":
            print(f"\n{player.name} decides to leave the dungeon. The adventure ends here.\n")
            
